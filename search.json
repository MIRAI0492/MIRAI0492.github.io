[{"title":"对于AI的基本理解","url":"/2025/05/04/AI/AI%E7%9A%84%E5%B8%B8%E7%94%A8%E6%9C%AF%E8%AF%AD%E5%8F%8A%E6%A6%82%E5%BF%B5/","content":"对于AI的基本理解Prompt在chatGPT诞生的时候，对于AI的理解就是一个聊天框。当输入一条语句给AI的时候，它就会返回一条答案或者回复给我们。而在这里，我们发送的消息就叫做Prompt（User Prompt）。\n但是，这样的回复不能满足用户，因为这样的AI只是很单一的，它没有一个人设，不像平常的聊天，不同的人对于同一个问题可能有不同的回复。因此，我们需要给他一个人设，就可以在聊天框中给它绑定一个人设，那么下次回答他就可以根据它的人设背景进行回答了。\n这里就有出现了一个问题，我们每次和它聊天都需要进行人设的绑定，这样显得很麻烦。所以，就有了另外的Prompt————System Prompt，我们可以将它的人设存放在这里，我们给它发送消息时，就不用给它重新绑定人设了，因为AI得到的消息是User Prompt + System Prompt。\nAI AgentAgent就是能自主感知环境、做出决策并执行行动的智能体，它和普通的AI模型是有一定的区别的。\n\nAI模型是被动响应（chatGPT等）\nAI Agent是主动执行任务的，比如自动订机票、找资料、完成代码调试等\n\n具体是如何实现的？\n假设我们有一个场景：帮我查找10篇关于AI的最新论文。\n首先，我们需要有一些工具Agent Tools（可以理解为工具类函数：想要的内容以及返回的格式），比如说：寻找某个关键字的论文的工具（getPapersByKey）、浏览网页的工具（browseWeb）。然后，当用户提出User Prompt的时候，AI Agent就会去调用Agent Tools，将这些工具转换为System Prompt，将User Prompt + System Prompt发送给AI模型。接着AI模型通过这些内容就会得到一个答案，将这个答案返回给AI Agent。如果答案的格式或者内容不正确，那么AI Agent就会重新让AI模型生成答案，得到想要的答案后，就会返回给用户。\n但是，这样就会出现另外的一种情况，这样反复重新让他生成答案不是很优雅，会持续浪费用户的时间以及Token，造成这个的原因是：Agent Tools中的工具是一种描述，并不是很规范，于是Function Calling出现了。\nFunction Calling就是对Agent Tools的调用的规范，可以将这个规范改为一个JSON字符串，这里还可以对规范AI的返回结果的格式。\n&#123;  &quot;function&quot;: &quot;getPapersByKey&quot;,  &quot;arguments&quot;: &#123;    &quot;key&quot;: &quot;AI&quot;  &#125;&#125;\n\nFunction Calling会替换System Prompt，从而增加AI的回答标准。\n当AI还是生成了错误的答案时，AI也会根据返回的格式要求进行重新生成。\n目前，System Prompt和Function Calling还是共存的形式。\n这些就是AI Agent和AI模型是如何进行联系的，接下来就是AI Agent和Agent Tools是如何进行通信的了————MCP\nMCP在之前的服务中，一个AI Agent调用一个Agent Tools，当遇到有通用的Agent Tools时候，这样会显得不是很优雅。于是MCP协议诞生了，会将Agent Tools封装成一个服务（MCP Server），其他的AI Agent（MCP Client）可以在这里面找需要的工具，就大大增加了工具的复用性了。\n其中，MCP Server会暴露出通用的接口（查询有哪些Agent Tools，需要的参数，格式等），还会暴露出数据（类似文件读写）、prompts提示词。\n","categories":["AI"],"tags":["AI","Agent","Function Calling","MCP","Prompt"]},{"title":"vue首次挂载流程","url":"/2025/09/07/Vue/vue%E9%A6%96%E6%AC%A1%E6%8C%82%E8%BD%BD%E6%B5%81%E7%A8%8B/","content":"vue首次挂载流程从vue.createApp开始从vue.createApp开始，在runtime-dom&#x2F;index.ts中的createApp方法，具体实现在runtime-core\\src\\renderer.ts的baseCreateRenderer\nbaseCreateRenderer返回create函数，值为createAppAPI返回值。\ncreateAppAPI返回的值就是app实例，包含mixin、use、mount等方法。\n参数归一化背景：app.mout(‘#app’)，这个函数是可以接受字符串和dom元素作为容器，是如何处理字符串的呢？\nruntime-dom&#x2F;index.ts中的createApp：\n通过解构上述createAppAPI返回app对象获取到mount方法，重新将参数做处理，当为字符串时：\nif (isString(container)) &#123;  const res = document.querySelector(container)  if (__DEV__ &amp;&amp; !res) &#123;    warn(      `Failed to mount app: mount target selector &quot;$&#123;container&#125;&quot; returned null.`,    )  &#125;  return res&#125;\n\n模板归一化背景：编写vue模板代码有两种方式\n当没有reder方法和template对象时，vue会自动添加一个template对象，值为模板内容：\nif (!isFunction(component) &amp;&amp; !component.render &amp;&amp; !component.template) &#123;  component.template = container.innerHTML&#125;\n\ninstance实例在mountComponent中，通过createComponentInstance方法创建一个空的实例，然后在setupComponent中添加属性，具体添加过程是在setupStatefulComponent和finishComponentSetup添加的\ncompile编译（获得render方法）在finishComponentSetup方法中，通过compile方法编译template获得render方法\nComponent.render = compile(template, finalCompilerOptions)instance.render = (Component.render || NOOP) as InternalRenderFunction\n\npackages\\compiler-core\\src\\compile.ts：\n这里就是具体实现了\nconst ast = isString(source) ? baseParse(source, resolvedOptions) : source\n\n通过baseParse函数将template转换为ast抽象语法树，再进行转换。为什么要转换呢？\ntransform(  ast,  extend(&#123;&#125;, resolvedOptions, &#123;    nodeTransforms: [      ...nodeTransforms,      ...(options.nodeTransforms || []), // user transforms    ],    directiveTransforms: extend(      &#123;&#125;,      directiveTransforms,      options.directiveTransforms || &#123;&#125;, // user transforms    ),  &#125;),)\n\n这里就会有一个优化了，叫做静态提升，指的是 Vue 编译器识别模板中的静态内容（不依赖动态数据的部分），并将这些内容”提升”到渲染函数之外。这样这些静态内容只会被创建一次，而不是在每次组件重新渲染时都重新创建。\nsubTree通过执行render函数获取到VNode\nconst subTree = (*instance*.subTree = renderComponentRoot(*instance*))\n\npatch将subTree通过patch挂载到container上。\npatch(    null,    subTree,    container,    anchor,    instance,    parentSuspense,    namespace,)\n\npatch主要的参数：第一个是旧VNode，第二个是新VNode\n挂载通过调用hostCreateElement创建DOM，再通过hostInsert将创建的元素插入到container中\n更新DOM(diff算法)无key更新（patchUnkeyedChildren）\n函数会接受两个新旧VNode数组，获取到新旧VNode的长度，取较小值开始循环。每次循环将从第一个新旧VNode开始patch。循环结束后，比较新旧VNode的长度，oldLength &gt; newLength则调用unmountChildren删除不需要渲染的节点；反之，则添加mountChildren添加新DOM\n有key更新（patchKeyedChildren）\n注意五个变量：\n\ni：下标，从0开始\ne1：旧VNode最后一个元素下标\ne2：新VNode最后一个元素下标\ns1：旧VNode中未匹配部分的起始索引，s1 &#x3D; i\ns2：新VNode中未匹配部分的起始索引，s2 &#x3D; i\n\n比较节点（isSameVNodeType：type和key相同，返回true），有以下几种情况：\n\n从新旧VNode的下标i开始比较，相同则patch，i++，继续循环；不同则break\n\n从新旧VNode的最后一个元素开始比较，相同则patch，e1–，e2–，继续循环；不同则break\n\ni &gt; e1 &amp;&amp; i &lt;&#x3D;e2，那么从i到e2的节点都是新增，循环patch\n\ni &gt; e2 &amp;&amp; i &lt;&#x3D;e1，那么从i到e1的节点都是删除的，循环unmount\n\n复杂情况： \n &#x2F;&#x2F; [i … e1 + 1]: a b [c d e] f g  \n &#x2F;&#x2F; [i … e2 + 1]: a b [e d c h] f g\n &#x2F;&#x2F; i &#x3D; 2, e1 &#x3D; 4, e2 &#x3D; 5\n &#x2F;&#x2F; s1 &#x3D; 2, s2 &#x3D; 2\n\ne2与s1对比，若它们的key和type都相同，把s1对应的真实节点移动到e1对应的真实节点的后面，并且s1变成undefined。s1++，e2–\ne1与s2对比，若它们的key和type都相同，把e1对应的真实节点移动到s1对应的真实节点的前面，并且e1变成undefined。s2++，e1–\n\n\n\n","categories":["Vue"],"tags":["面试","前端","Vue","源码阅读"]},{"title":"git常用指令","url":"/2025/04/26/git/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","content":"基础配置# 设置全局用户名/邮箱（首次使用必须）git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;your@email.com&quot;\n\n仓库操作# 克隆仓库git clone &lt;仓库名&gt;# 初始化操作git init \n\n提交修改# 查看当前文件状态git status# 单文件添加到暂存区git add &lt;文件名&gt;# 暂存所有文件git add .# 提交暂存区内容并添加描述git commit -m &quot;描述&quot;# 修改最近一次提交的描述（没有push时）git commit --amend\n\n分支管理# 查看本地分支git branch# 查看所有分支（包括远程）git branch -a# 创建新分支git branch &lt;分支名&gt;# 切换分支git checkout &lt;分支名&gt;# 创建并切换分支git checkout -b &lt;分支名&gt;# 删除本地分支（需不在该分支上）git branch -d &lt;分支名&gt;# 强制删除未合并的分支git branch -D &lt;分支名&gt;\n\n远程协作# 查看远程仓库地址git remote -v# 拉去远程分支最新代码（会自动合并）git pull origin main# 推荐方式：先拉取再合并（更安全）git fetch origin  # 只下载不合并git merge origin/main  # 手动合并# 推送本地分支到远程git push origin &lt;本地分支名&gt;# 删除远程分支git push origin --delete &lt;远程分支名&gt;\n\n合并与冲突# 将 feature 分支合并到当前分支git merge feature# 冲突解决步骤：1. 执行合并/拉取后出现冲突2. 用 IDE 或编辑器手动修改冲突文件（搜索 &gt;&gt;&gt;&gt;&gt; 标记）3. 添加解决后的文件：git add conflicted_file.py4. 完成合并：git commit\n\n撤销操作# 撤销工作区修改（危险！不可恢复）git checkout -- filename.js# 撤销暂存区的文件（保留工作区修改）git reset HEAD filename.js# 回退到某个 commit（保留工作区修改）git reset --soft commit_id# 彻底回退到某个 commit（慎用！）git reset --hard commit_id# 恢复被删除的分支（通过 reflog 查找 commit）git refloggit checkout -b recovered-branch commit_id\n\n规范分支\nmain&#x2F;master：生产环境代码\ndevelop：开发分支\nfeat&#x2F;xxx：功能分支\n\n提交git commit -m &quot;fix: resolve login timeout issue&quot;\n\n开发流程\ngit checkout -b my-feature   # 本地新建分支\n开发并提交代码\ngit push origin my-feature   # 推送到远程\n在GitHub&#x2F;GitLab创建Merge Request\n代码审查后合并\n\n","categories":["git基础"],"tags":["编程","git"]},{"title":"ts装饰器","url":"/2025/05/19/Typescript/%E8%A3%85%E9%A5%B0%E5%99%A8/","content":"装饰器介绍装饰器其实就是一个函数，通过注入的方式到类、方法、属性、参数上，拓展其功能。\n\n注意  装饰器是一项实验性特性，在未来的版本中可能会发生改变。\n\n所以，需要在tsconfig.json中开启兼容\n&quot;experimentalDecorators&quot;: true, \n\n装饰器使用语法如下：\nfunction fun1() &#123;&#125;@fun1 // 等同于fun(Person1)class Person1 &#123;&#125;\n\n类装饰器// 类装饰器function fun1(target: any) &#123;  // 这里的参数就是装饰的类  target.prototype.name = &quot;lisi&quot;;&#125;@fun1class Person1 &#123;&#125;let p1 = new Person1();// @ts-ignoreconsole.log(p1.name);\n\n这里的类装饰器不能传递参数，如果需要传参@fun1(arg)，则需要使用装饰器工厂\n装饰器工厂其实就是返回一个函数，外面的函数用来接收参数，里面的函数用来就是一个装饰器。（函数柯里化）\n// 装饰器工厂(可以传参)function fun2(value: any) &#123;   return function (target: any) &#123;    target.prototype.username = value.username;    target.prototype.age = value.age;  &#125;;&#125;@fun2(&#123;  username: &quot;zhangsan&quot;,  age: 18,&#125;)  class Person2 &#123;&#125; let p2 = new Person2();// @ts-ignoreconsole.log(p2.username, p2.age);\n\n如果说同时使用了装饰器工厂和装饰器，那么它们的执行顺序不是从上到下的规律\n装饰器组合可以对同一个类使用多个装饰器和装饰器工厂。执行顺序如下：\n\n执行所有的装饰器工厂，获取到装饰器\n从下到上执行装饰器\n\nfunction demo1(target: any) &#123;  console.log(&quot;demo1&quot;);&#125;function demo2() &#123;  console.log(&quot;demo2&quot;);  return (target: any) =&gt; &#123;    console.log(&quot;demo2 into&quot;);  &#125;;&#125;function demo3() &#123;  console.log(&quot;demo3&quot;);  return (target: any) =&gt; &#123;    console.log(&quot;demo3 into&quot;);  &#125;;&#125;function demo4(target: any) &#123;  console.log(&quot;demo4&quot;);&#125;// 装饰器执行顺序@demo1@demo2()@demo3()@demo4class Person3 &#123;&#125;\n\n因此，打印结果如下：\ndemo2demo3demo4demo3 intodemo2 intodemo1\n\n属性装饰器装饰属性\n参数：\n\n对于静态属性来说是类的构造函数，对于实例属性是类的原型对象\n属性的名称\n\n// 属性装饰器function fun3(value: any) &#123;  return function (target: any, propertyKey: any) &#123;    target[propertyKey] = value;    // console.log(target); // Person4.prototype  &#125;;&#125;class Person4 &#123;  @fun3(&quot;wangwu&quot;)  // @ts-ignore  name: string;&#125;let p4 = new Person4();console.log(p4.name);\n\n方法装饰器方法装饰器声明在一个方法的声明之前（紧靠着方法声明）。 它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。\n方法装饰器表达式会在运行时当作函数被调用，传入下列3个参数：\n\n对于静态方法来说是类的构造函数，实例方法则是类的原型对象\n方法名\n方法的属性描述符\n\n// 方法装饰器function fun4() &#123;  return function (target: any, propertyKey: any, descriptor: any) &#123;    // target[propertyKey] = value;    console.log(target, propertyKey, descriptor);  &#125;;&#125;class Person5 &#123;  @fun4()  // @ts-ignore  satName() &#123;    console.log(&quot;say name&quot;);  &#125;&#125;\n\n打印结果：\n&#123;&#125; satName &#123;  value: [Function: satName],  writable: true,  enumerable: false,  configurable: true&#125;\n\n参数装饰器参数装饰器用来装饰参数\n参数：\n\n对于静态成员来说是类的构造函数，对于实例成员是类的原型对象\n成员的名字\n参数在函数参数列表中的索引\n\nfunction fun5(target: any, propertyKey: string, parameterIndex: number) &#123;  console.log(target);   console.log(&quot;key &quot; + propertyKey);  console.log(&quot;index &quot; + parameterIndex);&#125;;class Person6 &#123;  name: string;  constructor() &#123;    this.name = &#x27;junjie&#x27;;  &#125;  getName(@fun5 name: string)&#123;    return name  &#125;&#125;const user = new Person6();user.name = &#x27;user&#x27;console.log(user.name)\n\n输出结果：\n&#123;&#125;key getNameindex 0user\n","categories":["Typescript"],"tags":["ts","装饰器"]},{"title":"前端基础知识","url":"/2025/04/26/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","content":"\nObject.is() 和 “”&#x3D;&#x3D;”” 的区别\n双等号（&#x3D;&#x3D;）：如果两边类型相同，则会进行严格比较；如果类型不同，进行类型转换，再进行比较。如null和undefined相等、布尔转数字、字符串转数字、对象转原始。\nObject.is()：类型不同，返回false；类型相同，进行比较。其中，-0和+0不等，NaN和NaN相等。\n\n\n0.1+0.2为什么不等于0.3，原理是什么？\n在JavaScript中，小数的计算会先将小数转换为二进制数，再进行计算。由于0.1和0.2不能准确转换为有限的二进制数，所以会有精度损失，导致这两个数的相加不等于准确值。\n\n\n小数转换为二进制数\n整数部分的转换方法已掌握。\n小数部分：将小数乘以2，记录整数部分，将小数部分继续乘以2，直到小数部分为0，将整数正序排列。\n\n\ntypeof能区分数组和对象吗？判断数组的方法有哪些？\ntypeof不能区分出数组和对象，因为得到的值都为’object’。\n判断数组的方法：使用Object.prototype.toString（结果为[object array]）、使用arr.prpto &#x3D;&#x3D;&#x3D; Array.prototype、arr instanceof Array、ES6的方法Array.isArray()。\n\n\n常见的隐式转换有哪些？\n比较操作&#x3D;&#x3D;、四则运算（+-*&#x2F;）、条件语句后面的表达式。\n\n\njs中隐式类型的转换规则\n&#x3D;&#x3D;比较：若操作数类型相同，严格比较；若不同：字符串和数字，字符串转换为数字；布尔值和数字，布尔值转换为数字；对象和数字或字符串，对象转原始。\n四则运算（+）：都为数字，相加；都为字符串，拼接；一个数字，一个字符串，数字转字符，然后拼接；有对象，转原始，根据转换规则进行加法；有布尔值，布尔转数字，根据转换规则进行加法；若另一个为字符串，直接拼接；有null或者undefined，null变为0，undefined变为NaN，根据转换规则进行加法；若另一个为字符串，直接拼接。\n四则运算（-*&#x2F;）：字符串与数字，字符转数字；布尔与数字，布尔转数字；null或者undefined与数字，null变为0，undefined变为NaN。\nif语句后的表达式：以下为false，其他为true：false、0、NaN、null、undefined、””。\n\n\n对象转原始\n先调用valueOf()方法，当valueOf()返回的不是基本类型，才调用toString()。\n\n\njs数据类型有哪些？\nNumber、String、Boolean、Null、Undefined、Symbol、BigInt。\n\n\n数据类型的检测方式有哪些？\ntypeof判断基本类型（除了null，会返回’object’）；instanceof判断一个对象是否为某个构造函数的实例；Object.prototype.toString.call()（表示对象的内部属性 [object Number]）。\n\n\nnull和undefined的区别\nnull表示空对象引用，undefined表示声明未赋值。\n类型检测的区别：使用typeof操作符，null为’object’，undefined为’undefined’。\n比较操作：&#x3D;&#x3D;相等，代表没有值；&#x3D;&#x3D;&#x3D;不相等，不同类型。\n变量赋值：undefined表示未赋值（开发者忘了），null表示这个变量没有值（开发者主动赋值）。\n\n\ntype能够判断null吗？\n不能，结果为’object’。这是js的历史遗留问题。js在设计之初，使用二进制表示js的值，低位表示数据类型。对象的类型标识符为000，而null表示空指针，它的二进制全为0。所以这两个的类型标识符一样。\n\n\n|| 和 &amp;&amp; 的计算规则\n||：都为假，返回最后一个表达式；第一个为真，返回第一个表达式的值；第一个为假，返回第二个。\n&amp;&amp;：都为真，返回最后一个表达式；第一个为假，返回第一个；第一个为真，返回第二个。\n\n\n数组浅拷贝的方式\nslice()：const arr2 &#x3D; arr.slice()。\nconcat()：const arr2 &#x3D; [].concat(arr)。\n扩展运算符：const arr2 &#x3D; […arr]。\nArray.from()：const arr2 &#x3D; Array.from(arr)。\n\n\n对象浅拷贝方式\nObject.assign()。\n扩展运算符：const newObj &#x3D; {…obj}。\nfor in。\nkeys().foreach()。\n\n\n深拷贝的方式\nJSON.parse(JSON.stringify(obj))的缺点：无法拷贝函数，无法拷贝特殊对象（Date、正则表达式），不会拷贝原型链上的属性，忽略symbol和undefined属性。\n\n\n如何安全的获取undefined的值\n使用void：const safeUndefined &#x3D; void 0。\n\n\njs中的包装类型是什么？\n为原始值临时提供方法和属性。js中有三个包装类型：String、Number、Boolean。\n包装类型的行为：当试图访问原始值的属性和方法时，js会自动创建对应的包装对象，然后在对象上调用方法和属性。操作完成后，临时创建的对象就会被销毁。\n\n\nES6中的rest参数\n表示不确定数量的参数。在函数中定义，将传入的多个参数包装成一个数组。rest参数必须是最后一个参数，并且只有一个。\n\n\nvar、let、const的区别\n作用域：var在函数作用域中有效，函数外部声明，提升到全局作用域；函数内部声明，提升到函数作用域。let、const在块级作用域有效。\n重新赋值：var可以重新赋值且重新声明；let可以重新赋值不可重新声明；const不能重新赋值不可重新声明，必须初始化。\n提升：var会被提升到其作用域的顶部；let和const也会提升到作用域的顶部，但是在初始化前不可以访问（暂时性死区）。\n\n\n暂时性死区\n定义：在变量声明之前访问变量会导致引用错误。\n作用：可以防止因变量提升带来的潜在错误。\n\n\n为什么const定义的对象的属性可以被修改\nconst常量指的是变量标识符的引用，而不是它所指向的值。例如：const myObject &#x3D; {name: “Alice”}; myObject.name &#x3D; “Bob”;这是允许的。而myObject &#x3D; {name: “Charlie”};会抛出错误。\n\n\n冻结对象\n可以用Object.freeze方法，使对象的属性变得不可变。但只能冻结第一层属性。若属性也是对象，这些内部对象的属性依然可变，深度冻结需要递归的使用Object.freeze。\n\n\n箭头函数的特性\n定义方式、参数处理、函数体。\n没有自己的this对象，箭头函数的this指向不能通过call、apply、bind改变，不能成为构造函数，不能new，没有arguments对象、没有原型prototype，不能用作生成器函数、不能使用yield、没有super。\n\n\n箭头函数的this指向\n指向定义它时所处上下文的对象的this。\n\n\n扩展运算符的作用以及使用场景\n作用：允许可迭代的数组或者字符串被展开为一系列的参数。\n使用场景：数组和对象的复制、克隆、及合并；将数组或者对象中元素作为函数参数。\n\n\nProxy的作用\n拦截和定义对象的基本操作。\n数据验证、属性保护。\n实现观察者模式。\n创建虚拟属性和方法。\n代理外部接口，可以将API调用封装为本地对象的属性访问操作。\n\n\n数组解构和对象解构\n数组解构：const [a, b, c] &#x3D; [1, 2, 3]; console.log(a); &#x2F;&#x2F; 输出1；console.log(b); &#x2F;&#x2F; 输出2；console.log(c); &#x2F;&#x2F; 输出3。\n对象解构：const user &#x3D; {name: ‘Alice’, age: 25}; const {name, age} &#x3D; user；console.log(name); &#x2F;&#x2F; 输出’Alice’；console.log(age); &#x2F;&#x2F; 输出25。\n\n\n解构的高级用法\n嵌套解构。\n默认值：const [x &#x3D; 10, y &#x3D; 5] &#x3D; [undefined]; console.log(x); &#x2F;&#x2F; 输出10；console.log(y); &#x2F;&#x2F; 输出5；const {a &#x3D; 3, b &#x3D; 4} &#x3D; {a: undefined}; console.log(a); &#x2F;&#x2F; 输出3；console.log(b); &#x2F;&#x2F; 输出4。\n交换变量：[m, n] &#x3D; [n, m]。\n函数参数解构。\n\n\n什么是原型和原型链\n原型：是js中每个对象都具有的一个内部属性[[Prototype]]，通常可以通过__proto__属性访问，每个对象的原型也是一个对象，它存储了一些可以被共享的属性和方法。\n原型链：是一个从对象的原型开始，逐级向上查找的链式结构。每个对象的原型也是一个对象，这个原型对象也有自己的原型，如此递归，直到找到null（Object.prototype的原型是null）。\n\n\n原型修改与原型重写\n原型修改：更改原型对象的方法和属性。\n原型重写：将对象的原型更改为一个全新的对象。\n\n\n获取对象非原型链上的属性\nhasOwnProperty、Object.getOwnPropertyNames、Object.keys、Object.getOwnPropertySymbols。\n\n\nPromise的创建，以及拥有哪些方法\n创建Promise：接收一个执行器函数，包含resolve和reject参数，分别处理成功和失败的情况。\nthen：处理Promise执行的结果。接收两个参数，一个处理成功，一个处理失败。\ncatch：处理Promise失败的结果，then方法的语法糖。\nfinally：无论执行成功，都会执行的回调。\nPromise.all和Promise.race：Promise.all：并行执行多个Promise，所有Promise成功时返回成功结果，任一失败则返回失败。Promise.race：并行执行多个Promise，第一个完成的Promise决定结果。\nPromise.allSettled。\n\n\nPromise.all和Promise.allSettled的区别\n都是并行执行多个Promise。\n区别：Promise.all只有当所有Promise都成功，返回一个成功的Promise，结果是包含所有成功的Promise结果的数组。如有一个失败，立即返回一个失败的Promise，错误信息为失败的错误的Promise的错误。Promise.allSettled无论Promise执行失败与否，都会返回一个Promise，结果是包含每个Promise结果的数组。每个结果对象包含status和value或者reason属性。\n\n\nasync&#x2F;await是什么\n是处理异步操作的语法糖，基于Promise实现。让异步代码看起来像同步代码，提高代码的可读性和可维护性。\nasync：声明异步函数。返回Promise。若显式返回一个值，则包装成一个Promise。可以单独使用。\nawait：暂停等待Promise完成，返回结果。只能在async中使用。\n\n\nasync&#x2F;await 对比 Promise 的优势是什么？\n代码可读性：消除链式调用的复杂性。\n错误处理：使用try&#x2F;catch捕获，更加直观。若Promise有内部错误，会使用嵌套的catch。\n调试方便：若有多个异步操作，若其中有一个发生错误，使用Promise的话，不清楚是谁发生错误。而async&#x2F;await则可以。\n\n\n回调函数以及缺点\n是将一个函数作为参数传给另外一个函数，在主函数执行完被调用。\n缺点：回调地狱、错误处理复杂、代码执行流程不直观。\n\n\n异步编程有哪些实现方式\n回调函数、Promise、async&#x2F;await、生成器与迭代器。\n\n\nsetTimeout、setInterval、requestAnimationFrame 各有什么特点？\nsetTimeout：只延迟执行一次代码、延迟时间可能不准确（会受到其他线程的影响）。\nsetInterval：按照固定的时间重复执行代码、延迟时间可能不准确（会受到其他线程的影响）。\nrequestAnimationFrame：专门处理动画效果、在浏览器下一次重绘之前调用回调函数、执行频率与设备屏幕刷新率同步。\n\n\n什么是闭包\n闭包本质上是一个函数，它可以访问到其创建时所在的作用链中的变量。即使外部函数已经执行完，闭包仍然可以访问这些变量。\n\n\n闭包的应用\n创建私有变量和方法、事件处理器和回调函数、函数工厂，生成不同行为的函数。\n\n\n闭包的实现原理\n作用域链保存：函数创建的时候，会有一个内部属性[[Scope]]，用于保存其创建时所在的作用域链。函数执行时，会创建一个新的上下文和作用域链。新的作用域链包含当前函数的变量以及[[Scope]]中的作用域链。\n垃圾回收：闭包会阻止外部函数的变量被垃圾回收机制回收。当闭包函数被销毁时，外部函数的变量才被回收。这也是闭包会导致内存泄露的原因。\n\n\n作用域是什么，类型有哪些？作用域链是什么\n作用域：一个变量或者函数在代码中能够访问的范围。\n类型：全局、局部（函数、块级（let&#x2F;const）)。\n作用域链：当前变量在当前作用域未能找到时，js会一层一层往外寻找，直到找到或者到全局作用域。\n\n\n垃圾回收机制\n引用-计数法：每个对象有一个引用计数器，记录指向这个对象的引用数量。当这个对象的引用计数为零时，这个对象就会被回收。缺点：无法处理循环引用。\n标记-清除法：从根对象出发，递归标记所有可达对象。未被标记的对象就会被回收。缺点：可能会导致内存碎片化。\n\n\nWeakMap 和 Map 的区别\n键的类型：WeakMap的键是对象，不能是原始值；Map的键可以是任意类型。\n垃圾回收：WeakMap的键是弱引用，可以被垃圾回收；Map的键是强引用，不会被垃圾回收。\n应用类型：WeakMap适用于临时存储的场景，避免内存泄露；Map适用于频繁增删改查的场景。\n\n\n什么是 JavaScript 的执行上下文？\n是代码执行时的环境，包括代码执行所需的信息。\n执行上下文类型：全局执行上下文、函数执行上下文、eval函数执行时上下文。\n执行上下文组成：变量对象（变量声明和函数声明）、作用域链、this绑定。\n\n\nthis的指向规则\nthis的指向取决于函数的调用方式，不是函数的定义位置。\n\n\ncall、apply 及 bind 函数有什么区别？\ncall：立即调用、参数逐个传递。\napply：立即调用、参数为数组。\nbind：返回一个新函数，参数逐个传递。\n\n\ncall、apply 及 bind 函数使用场景\ncall和apply用于借用方法，显示绑定this。\napply用于参数不太确定的情况。\nbind用于创建一个函数并绑定this，适合事件处理。\n\n\n对象创建的方式有哪些？\n直接{}、构造函数、Object.create()、class，然后new、由函数返回一个对象。\n\n\nObject.create()的工作原理\n创建一个空的构造函数fun。\nfun.prototype指向传入的参数。\n返回new fun()。\n\n\njs继承方式\n原型链继承、构造函数继承、组合继承、寄生组合继承、类继承。\n\n\n原型链继承以及缺点\n实现方式：将子类的原型prototype指向父类的实例（Child.prototype &#x3D; new Parent();）。\n缺点：所有实例共享父类属性，修改子类属性会影响到所有实例。\n\n\n构造函数继承\n实现：在子类的构造函数中调用父类的构造函数（Parent.call(this);）。\n优点：每个实例都有自己的属性，不会共享父类的属性。\n缺点：不能继承父类的原型方法。\n\n\n组合继承\n实现：调用父类构造函数，子类的原型指向父类的实例（Parent.call(this); Children.prototype &#x3D; new Parent();）。\n优点：结合了原型链继承和构造函数继承的优点。\n缺点：调用了两次父类构造函数，开销较大。\n\n\n寄生组合继承\n实现：子类调用父类的构造函数，子类的原型指向空实例对象，该空实例对象原型指向父类原型（Parent.call(this); Children.prototype &#x3D; Object.create(Parent.prototype);）。\n优点：避免调用两次构造函数。\n\n\nES Module 与 CommonJS 模块方案有什么异同？\n相同：模块化规范，导入导出模块。\n不同点：ES Module是ES6引入的，动态导入，编译时加载，异步；CommonJS出现在ES6之前，不支持动态导入，运行时加载，同步。\n\n\n什么是变量提升？导致了什么问题\n在代码执行之前，将变量和函数提升到当前作用域的顶部。\n问题：变量在声明前可调用，但是值为undefined，逻辑错误；变量声明和使用距离远，代码可读性差；变量名冲突；var声明的变量会提升到全局，导致全局作用域污染。\n\n\nforEach 和 map 方法有什么区别？\nforEach方法没有返回值，map方法会返回一个新数组。\nforEach主要用于修改原数组、打印等，map主要用于将原数组的每个元素转换新的元素。\n\n\n数组的遍历方法有哪些？\nfor、forEach、map、for…of、filter、reduce等。\n\n\n脚本延迟加载的方式\n使用async属性、使用defer属性、动态创建脚本元素、使用模块化加载工具。\n\n\nhook的使用以及注意方式\n只能在最外层使用，不能写在循环、条件、其他普通js函数中；只能在react相关的函数中使用，如use开头的自定义hook函数中。\n\n\n为什么要有hooks\n组件之间复用状态逻辑困难、类组件会有复杂的生命周期、难以理解的class。\n\n\n什么是跨域？\n浏览器由于同源策略限制一个源到另一个源的资源请求，如果协议、域名、端口任一不同，都会跨域。\n\n\n如何解决跨域问题\n后端采用CORS、前端采用代理服务器（让请求先发送到本地服务器，再由服务器转发请求，避免浏览器限制）。\n\n\nES6新特性有哪些？\nlet、const、箭头函数、模版字符串、解构赋值、默认参数、扩展运算符、类与模块、Promise、Symbol、Map、Set。\n\n\n什么是纯函数？\n确定性：对于相同的输入，纯函数总是产生相同的输出。\n无副作用：纯函数不会修改其外部环境，包括全局变量、输入参数对象等。\n\n\njs有哪些纯函数？\ntoSorted()、toReversed()、toSpliced()、with()。\n\n\n设计一个组件需要考虑哪些因素\n功能性：组件的用途及逻辑交互（如点击、拖拽等）。\nAPI设计：确定暴露的属性（props）及默认值，考虑是否需要事件回调。\n可复用性：确保组件能在多种场景下使用。\n可维护性：代码需清晰、可读、易维护。\n状态管理：决定使用受控组件还是非受控组件，是否需要useState及外部状态管理。\n\n\naxios二次封装\n统一设置baseURL、timeout等基础配置。\n利用请求和响应拦截器，实现token自动注入与异常处理。\n封装常用GET、POST等方法，简化接口调用。\n\n\nHTML语义化是什么，有哪些优点？\nHTML语义化指根据内容结构和含义选择合适标签，更好表达内容意义和层次。\n优点：利于SEO优化，提高代码维护性和可读性。\n\n\nCSS盒模型\n由margin、border、padding、content组成。\n标准盒模型（box-sizing: content-box）：设置的width和height为content区域，整体宽高需加border和padding。\n怪异盒模型（box-sizing: border-box）：设置的width和height为整个盒子大小。\n\n\n浮动及问题解决\n浮动使元素左右排列，可能造成父元素高度塌陷及兄弟元素显示问题。\n清除浮动方式：\n浮动元素后加空元素，设clear: both。\n父元素后加伪元素::after，设clear: both。\n父元素设overflow: hidden。\n父元素设display: flow-root。\n\n\n\n\nCSS选择器优先级\n优先级从高到低：!important &gt; 内联样式 &gt; id选择器 &gt; 属性选择器 &gt; 类选择器 &gt; 伪类选择器（:hover） &gt; 标签选择器 &gt; 伪元素选择器（::after） &gt; 后代选择器 &gt; 子类选择器 &gt; 相邻选择器 &gt; 通配符选择器。\n\n\nCSS尺寸单位\npx：像素，绝对单位。\nem：以自身或继承父元素font-size为基准。\nrem：以根元素font-size为基准。\nvw：以视窗宽度为基准。\nvh：以视窗高度为基准。\n\n\nBFC及其特点、设置方式\nBFC（块级格式化上下文）是独立渲染区域。\n特点：不受边界外元素影响内部渲染。\n设置方式：\nfloat不为none。\ndisplay为inline-block、table-cell、table-caption、flex、inline-flex。\nposition为absolute、fixed。\noverflow不为visible。\n\n\n\n\n未知元素宽高实现水平垂直居中\n方法一：绝对定位 + transform: translate(-50%, -50%)。\n方法二：flex布局，设display: flex，justify-content: center，align-items: center。\n方法三：grid布局，设display: grid，place-items: center。\n\n\n三栏布局\n方法一：flex布局，设display: flex，左右栏宽固定，中间栏设flex: 1。\n方法二：grid布局，设display: grid，grid-template-columns: 200px auto 200px。\n\n\n伪数组\n具备类似数组特性但非数组的对象，通常有length属性和按索引存储的元素。\n\n\nmap和forEach\nmap返回新数组，不改变原数组，处理速度快，方便链式调用。\nforEach可能改变原数组，无返回结果。\n\n\nnew操作符发生了什么\n创建空JS对象。\n新对象添加__proto__属性，链接至构造函数原型对象。\n新对象作为this上下文。\n\n\nscript标签中的defer和async属性的区别\nhtml文件默认按顺序执行，script标签无defer或async属性时，浏览器遇script标签会加载js文件，暂停html解析，加载完后立即执行js，再继续解析html。\n加defer或async属性时，浏览器遇script标签异步加载js文件，html解析与js加载并行，不阻塞html解析。\nasync：js加载完后立即执行，阻塞html解析。\ndefer：等待html解析完成后执行js文件。\n\n\n静态方法和实例方法\n静态方法：用static关键字定义，属类本身，只能由类名调用。\n实例方法：由类实例调用，不能由类名调用。\n\n\ncookie、sessionStorage、localStorage的区别\n共同点：均属浏览器存储，存储于本地，遵循同源原则。\n不同点：\ncookie由服务端写入，sessionStorage和localStorage在前端写入。\ncookie生命周期由服务端确定，localStorage长期存在（除非手动清除），sessionStorage页面关闭时清除。\ncookie存储空间约4kb，sessionStorage和localStorage空间较大（5M）。\n前端发请求给后端时，自动携带cookie，sessionStorage和localStorage不携带。\n\n\n\n\ntoken能否放在cookie中\n理论上可以，但是不建议将token放在cookie中。若token放在cookie中，发请求时会自动携带，无法有效防止CSRF攻击。\n\n\n受控组件和非受控组件\n受控组件：组件状态由React state管理，用户输入值反映到state中，表单组件值不由DOM直接管理。\n非受控组件：DOM元素值由浏览器管理，不受React state影响，通常用ref获取DOM节点value。\n\n\nTypeScript相较于JavaScript的优点\n类型安全性：强类型检查，在编译阶段发现错误。\n更好的工具支持：提供强大代码提示和补全功能。\n内置ES6模块。\n\n\n元素隐藏的方式及性能比较\nJavaScript事件循环及其必要性\n必要性：JS单线程，无法同时执行多任务，需事件循环管理任务执行顺序。\n组成部分：\n调用栈：执行同步代码。\n微任务队列：执行微任务（Promise.then、MutationObserver、queueMicrotask），优先级高于宏任务。\n宏任务队列：执行宏任务（setTimeout、setInterval、requestAnimationFrame等）。\n\n\n执行顺序：\n执行同步代码（所有同步任务进入调用栈）。\n执行所有微任务。\n执行一个宏任务。\n重复执行微任务和宏任务，直至所有任务完成。\n\n\n\n\n如何用CSS画三角形\n通过设置div的width和height为0，利用border属性创建三角形。例如：\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;title&gt;CSS三角形&lt;/title&gt;  &lt;style&gt;    div &#123;      width: 0;      height: 0;      border-left: 50px solid transparent;      border-right: 50px solid transparent;      border-bottom: 100px solid red;    &#125;  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n事件委托和事件代理\n事件委托是事件代理的具体应用场景。\n事件代理：借助事件冒泡机制，将子元素事件委托给父元素。父元素监听事件，判断来源，处理目标元素。\n\n\n事件流的三个阶段\n事件捕获阶段：从window向目标元素传递事件，父元素优先捕获。\n目标阶段：事件到达目标元素。\n事件冒泡阶段：从目标元素向上冒泡至window。\n\n\nReact响应式原理\n通过State和Props驱动UI更新，采用虚拟DOM技术，结合高效DIFF算法实现高效页面渲染。\n\n\n虚拟DOM及其优势\n是JS对象，模拟真实DOM结构，避免直接操作DOM，提升性能。\n示例：\n真实DOM：\n&lt;div&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/div&gt;\n\n\n虚拟DOM（JS对象）：\n&#123;type: &#39;div&#39;, props: &#123;children: [&#123;type: &#39;h1&#39;, props: &#123;children: &#39;Hello&#39;&#125;&#125;]&#125;&#125;\n\n\n\n\n\n\nDiff算法解析\n用于比较新旧虚拟DOM，找出最小差异，高效更新真实DOM。\n树的Diff：节点类型相同则比较子节点，不同则替换节点。\n组件的Diff：同类型组件对比Props并重新渲染，不同类型组件卸载旧组件并挂载新组件。\n元素的Diff：更新属性、样式、事件变化。\n\n\n浏览器回流和重绘及其优化方法\n回流：元素尺寸、位置或布局改变时，浏览器重新计算页面结构和布局并绘制，消耗较大。\n重绘：元素视觉属性变化时（如颜色、背景、边框），浏览器重新绘制像素，不涉及布局计算，消耗较低。\n优化方法：\n合并样式变更：避免多次操作DOM，使用类名切换一次性修改样式。\n使用transform、opacity、visibility：不触发回流。\n减少布局操作。\n\n\n\n\nHTML、CSS和JavaScript在前端开发中的作用及关系\nHTML：定义网页结构和内容，如房子框架。\nCSS：美化网页外观和布局，如房子装修。\nJavaScript：负责交互和动态效果，如房子智能系统。\n\n\n常用Hook及使用场景\nuseState：管理组件状态，适用于表单输入、切换状态等场景。\nuseEffect：处理副作用，如数据获取、手动DOM操作，常用于组件挂载、更新和卸载时。\nuseContext：在组件树中共享状态，避免过多props传递。\n\n\nuseEffect的依赖项设置及空数组与不传依赖项的区别\n不传依赖项：每次渲染都执行。\n依赖项为空数组：仅组件挂载时执行一次，适合一次性副作用（如发API、初始化第三方库）。\n带依赖项：依赖项变化时执行副作用。\n\n\n自定义Hook的方法\n自定义Hook是use开头的函数，可使用其他Hook封装状态逻辑、数据请求等。\n\n\nJS加载对CSS解析的影响\nJS加载不影响CSS解析。若JS依赖CSS，可能会等待CSS加载完成。\n\n\n\n","categories":["前端面试"],"tags":["面试","前端","基础知识"]},{"title":"设计模式","url":"/2025/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","content":"设计模式设计模式简介通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的\n前端常用设计模式工厂模式一种创建对象的方式，使得创建对象的过程与使用对象的过程分离。在前端，常用于动态创建组件，比如创建相似样式和行为的按钮（比如antd中的按钮）\n我们来模拟一下创建antd的按钮的工厂\n首先，我们先定义一个接口，表示：按钮需要有点击事件和不同的样式，然后每个按钮类都去实现这个接口\n//模拟按钮的行为与行为interface Button &#123; // 点击事件 onClick(): void; // 渲染不同的样式 render(): void;&#125;// 这个Primary按钮class PrimaryButton implements Button &#123; render() &#123;  console.log(   &#x27;%c Primary Button&#x27;,   &#x27;background: blue; color: white; padding: 8px;&#x27;  ); &#125; onClick() &#123;  console.log(&#x27;Primary按钮被点击&#x27;); &#125;&#125;// 这个是Success按钮class SuccessButton implements Button &#123; render() &#123;  console.log(   &#x27;%c Success Button&#x27;,   &#x27;background: green; color: white; padding: 8px;&#x27;  ); &#125; onClick() &#123;  console.log(&#x27;Success按钮被点击&#x27;); &#125;&#125;// 这个是Danger按钮class DangerButton implements Button &#123; render() &#123;  console.log(   &#x27;%c Danger Button&#x27;,   &#x27;background: red; color: white; padding: 8px;&#x27;  ); &#125; onClick() &#123;  console.log(&#x27;Danger按钮被点击&#x27;); &#125;&#125;\n\n接下来，创建一个工厂类，这个工厂接收一个按钮类型参数，生成对应类型的按钮\nclass ButtonFactory &#123; createButton(type: string): Button &#123;  switch (type) &#123;   case &#x27;primary&#x27;:    return new PrimaryButton();   case &#x27;success&#x27;:    return new SuccessButton();   case &#x27;danger&#x27;:    return new DangerButton();   default:    throw new Error(&#x27;未知的按钮类型&#x27;);  &#125; &#125;&#125;const buttonFactory = new ButtonFactory();const primaryButton = buttonFactory.createButton(&#x27;primary&#x27;);primaryButton.render();primaryButton.onClick();\n\n这样，我们new一个工厂类的实例，调用工厂里的创建按钮的方法，传入按钮的类型，就可以得到一个按钮来，并且拥有对应按钮的方法和样式\n单例模式确保一个类只有一个实例，并提供一个全局访问点来访问该实例\n前端应用场景：全局状态管理，事件总线的创建等\n接下来使用单例模式模拟一个全局状态管理的案例。Store类中有两个变量，一个是instance（代表唯一实例），另外一个是state（代表实例中存储的状态）。创建实例的方法是由Store类提供，实例对象拥有存储和获取state的方法\nclass Store &#123; // 1.私有化处理 // 静态私有变量instance：代表一个唯一实例 private static instance: Store; // state代表实例的中的状态，是一个键为string，值为any的对象 private state: Record&lt;string, any&gt; = &#123;&#125;; // 私有化constructor，通过其他的方法getInstance()创建这个实例 private constructor() &#123;&#125; static getInstance(): Store &#123;  // 如果没有创建那就创建，创建了就直接返回  if (!Store.instance) &#123;   Store.instance = new Store();  &#125;  return Store.instance; &#125; // 设置状态 setState(key: string, value: any) &#123;  this.state[key] = value; &#125; // 获取到存入store中的实例 getState(key: string) &#123;  return this.state[key]; &#125;&#125;\n\n下面是代码测试\nconst store = Store.getInstance();store.setState(&#x27;store1&#x27;, &#x27;存储了一个state&#x27;);console.log(store.getState(&#x27;store1&#x27;));\n\n终端输出\n存储了一个state\n\n发布-订阅模式解耦消息的发布者和订阅者\n简单来说，涉及以下三个角色：\n\n发布者：发布信息\n订阅者：监听消息并执行逻辑处理\n消息中心：消息传递\n\n前端应用场景：事件总线\n使用发布-订阅模式模拟事件总线是如何实现的。EventBus类中有events属性（事件存储中心。有事件订阅时，存储在这里）、订阅方法subscribe、发布方法publish和取消订阅方法unsubscribe\nclass EventBus &#123; // 存储中心events private events: Record&lt;string, Function[]&gt; = &#123;&#125;; // 订阅方法--当有事件订阅时,将这个订阅存入events subscribe(eventName: string, callBack: Function) &#123;  if (!this.events[eventName]) &#123;   this.events[eventName] = [];  &#125;  this.events[eventName].push(callBack); &#125; // 发布方法--将对应的事件执行 publish(eventName: string, arg?: any) &#123;  if (this.events[eventName].length &gt; 0) &#123;   this.events[eventName].forEach(callback =&gt; callback(arg));  &#125; &#125; // 取消订阅方法 unsubscribe(eventName: string, callback: Function) &#123;  if (this.events[eventName]) &#123;   this.events[eventName] = this.events[eventName].filter(    fn =&gt; fn !== callback   );  &#125; &#125;&#125;\n\n测试代码\nconst bus = new EventBus();// 订阅事件bus.subscribe(&#x27;update&#x27;, (data: any) =&gt; &#123; console.log(&#x27;组件A接收到数据:&#x27;, data);&#125;);bus.publish(&#x27;update&#x27;, &#123; message: &#x27;Hello from Component B&#x27; &#125;);\n\n终端输出\n组件A接收到数据: &#123; message: &#x27;Hello from Component B&#x27; &#125;\n\n观察者模式定义了一种一对多的关系，当一个对象的状态发生改变时，其所有依赖者都会收到通知并且更新\n前端中的应用场景：响应式数据、store、事件监听等\n接下来，使用观察者模式模拟一个场景：当状态发生改变，更新状态，并且通知监听者输出新的状态\nObservable类中有监听者和状态属性，addObservers方法表示添加监听者；notify方法表示数据改变通知监听者；setState方法表示数据发生改变，更新状态；getState方法表示获取状态\nclass Observable &#123; private observers: Function[] = []; private state: any; // 添加监听者 addObservers(observer: Function) &#123;  this.observers.push(observer); &#125; // 通知监听者 notify() &#123;  this.observers.forEach(observer =&gt; observer(this.state)); &#125; // 更新状态 setState(state: any) &#123;  this.state = state;  this.notify(); &#125; // 获取状态 getState() &#123;  console.log(this.state);  return this.state; &#125; // 构造函数  constructor(state: any) &#123;  this.state = state; &#125;&#125;\n\n测试\nconst observable = new Observable(&#123; count: 1 &#125;);observable.getState();observable.addObservers((data: any) =&gt; &#123; console.log(&#x27;新改变的数据为&#x27;); console.log(data);&#125;);observable.setState(&#123; count: 2 &#125;);\n\n输出\n&#123; count: 1 &#125;新改变的数据为&#123; count: 2 &#125;\n\n中介者模式通过一个中介对象来管理其他的对象，对象之间不直接交互，通过中介对象进行交互，实现了组件之间的解耦\n场景：假设在一个表单页面里有 3 个组件：\n\n输入框（Input）\n\n按钮（Button）\n\n提示信息（Message）\n\n\n规则是：\n\n当输入框有内容时，按钮变成可点击，并且提示信息显示“可以提交”。\n\n当输入框为空时，按钮禁用，提示信息显示“请输入内容”。\n\n\n代码实现：\n// 定义中介者接口interface Mediator &#123; notify(sender:Component,event:string):void&#125;// 定义一个基本组件abstract class Component &#123; protected mediator!: Mediator; setMediator(mediator: Mediator) &#123;  this.mediator = mediator &#125;&#125;// 具体输入框组件class InputField extends Component &#123; private value: string = &#x27;&#x27;  // 模拟输入 type(text:string)&#123;  this.value = text  console.log(`输入框输入了$&#123;text&#125;`);  // 只有这个输入需要找中介  this.mediator.notify(this,&#x27;input&#x27;) &#125; getValue():string &#123;  return this.value &#125;&#125;// 具体提交按钮组件class SubmitButton extends Component &#123; private enabled: boolean = false  // 设置按钮是否可以点击 setEnabled(enabled: boolean) &#123;    this.enabled = enabled;    console.log(`SubmitButton: $&#123;enabled ? &#x27;可点击&#x27; : &#x27;禁用&#x27;&#125;`);  &#125;&#125;// 具体消息组件class MessageLabel extends Component &#123; // 设置消息内容  setMessage(message: string) &#123;    console.log(`MessageLabel: $&#123;message&#125;`);  &#125;&#125;// 表单中介者具体实现class FormMediator implements Mediator&#123; private inputField: InputField;  private submitButton: SubmitButton;  private messageLabel: MessageLabel; constructor(input: InputField, button: SubmitButton, label: MessageLabel) &#123;  this.inputField = input;    this.submitButton = button;  this.messageLabel = label;    // 注册自己为它们的中介者    this.inputField.setMediator(this);    this.submitButton.setMediator(this);    this.messageLabel.setMediator(this); &#125; notify(sender: Component, event: string): void &#123;  // 首先判断是否是输入框发送的消息  if (sender === this.inputField &amp;&amp; event === &#x27;input&#x27;) &#123;   // 如果是，获取到输入框发送的消息   let value = this.inputField.getValue()   // 判断消息   if (value.trim()) &#123;    // 不为空     this.submitButton.setEnabled(true)    this.messageLabel.setMessage(&#x27;可以提交&#x27;)   &#125; else &#123;    // 为空    this.submitButton.setEnabled(false);        this.messageLabel.setMessage(&#x27;请输入内容&#x27;);   &#125;  &#125; &#125;&#125;// 创建组件const input = new InputField();const button = new SubmitButton();const label = new MessageLabel();const mediator = new FormMediator(input, button, label);// 模拟用户数据输入input.type(&#x27;hello&#x27;)console.log(&#x27;*******************&#x27;);input.type(&#x27;&#x27;);\n\n输出结果：\n输入框输入了helloSubmitButton: 可点击MessageLabel: 可以提交*******************输入框输入了SubmitButton: 禁用MessageLabel: 请输入内容\n\n装饰者模式为原有的对象添加功能，但是不改变原有的对象的结构\n前端应用场景：React HOC组件、Vue的Directive（自定义指令）、事件增强 &#x2F; 埋点封装（为一个按钮添加其他的功能）等\n接下来，咱们就以事件增强 &#x2F; 埋点封装为例，为一个按钮添加日志、权限、防抖等功能\ntype ClickHandler = (...arg: any[]) =&gt; void// 装饰者1：日志功能function withLog(fn:ClickHandler):ClickHandler &#123;  return (...arg) =&gt; &#123;    console.log(`[Log] Clicked at $&#123;new Date().toISOString()&#125;`);    return fn(...arg)  &#125;&#125;// 装饰者2：权限function withPermission(fn:ClickHandler,hasPermission:Boolean):ClickHandler &#123;  return (...arg) =&gt; &#123;    if (!hasPermission) &#123;      console.log(&#x27;没有权限&#x27;);      return    &#125;    return fn(...arg)  &#125;&#125;// 装饰者3：防抖function withDebounce(fn: ClickHandler, delay: number): ClickHandler &#123;  let timer: ReturnType&lt;typeof setTimeout&gt; | null = null  return (...arg) =&gt; &#123;    if (timer) return    timer = setTimeout(() =&gt; &#123;      fn(...arg)    &#125;,delay)  &#125;&#125;// 原始点击逻辑（不修改）const originalClick: ClickHandler = () =&gt; &#123;  console.log(&#x27;我是原始点击&#x27;);&#125;;// 这是为按钮添加装饰器let enhanceClick = withLog(originalClick)enhanceClick = withPermission(enhanceClick, true);enhanceClick = withDebounce(enhanceClick, 500);// 模拟点击行为function simulateClick(times: number, interval: number) &#123;  let count = 0;  const intervalId = setInterval(() =&gt; &#123;    console.log(`🖱️ Simulated Click #$&#123;++count&#125;`);    enhanceClick();    if (count &gt;= times) &#123;      clearInterval(intervalId);    &#125;  &#125;, interval);&#125;simulateClick(5, 200);\n\n输出：（之所以不是最后一次执行，是因为定时器的延迟导致的）\n🖱️ Simulated Click #1🖱️ Simulated Click #2🖱️ Simulated Click #3[Log] Clicked at 2025-04-29T16:19:43.353Z我是原始点击🖱️ Simulated Click #4🖱️ Simulated Click #5\n\n原型模式通过“复制”现有对象来创建新对象，不是通过类的实例化来创建。\n前端应用场景：\n\n重复创建成本高的对象\n需要创建多个相似对象\n\ninterface Prototype&lt;T&gt; &#123;\tclone(): T&#125;class FormField implements Prototype&lt;FormField&gt; &#123;\tconstructor(\t\tpublic label: string,\t\tpublic type: string,\t\tpublic required: boolean = false,\t\tpublic placeholder: string = &#x27;&#x27;\t) &#123;&#125;\tclone(): FormField &#123;\t\treturn new FormField(this.label, this.type, this.required, this.placeholder)\t&#125;&#125;const nameField = new FormField(&#x27;姓名&#x27;, &#x27;text&#x27;, true, &#x27;请输入姓名&#x27;)const phoneField = nameField.clone()phoneField.label = &#x27;电话&#x27;phoneField.placeholder = &#x27;请输入电话号码&#x27;console.log(nameField) // 原字段console.log(phoneField) // 克隆字段\n\n适配器模式将一个接口转换为所需要的接口，处理接口不兼容的问题\n前端应用场景：\n\n处理后端接口返回的数据，适配前端需要的字段\n请求库的适配（fetch、Axios）\n\n// 前端组件数据接口interface UserCard &#123;  name: string;  avatarUrl: string;  email: string;&#125;// 后端返回的数据接口interface BackendUser&#123;  username: string;  profile: &#123;    avatar: string;    contact: &#123;      emailAddress: string;    &#125;;  &#125;;&#125;const backendUser: BackendUser = &#123;  username: &quot;张三&quot;,  profile: &#123;    avatar: &quot;https://example.com/avatar.jpg&quot;,    contact: &#123;      emailAddress: &quot;zhangsan@example.com&quot;,    &#125;,  &#125;,&#125;;class UserAdapter &#123;  static toUserCard(data: BackendUser): UserCard &#123;    return &#123;      name: data.username,      avatarUrl: data.profile.avatar,      email: data.profile.contact.emailAddress,    &#125;;  &#125;&#125;const userCard = UserAdapter.toUserCard(backendUser)console.log(userCard);\n\n","categories":["前端面试"],"tags":["面试","前端","设计模式"]}]